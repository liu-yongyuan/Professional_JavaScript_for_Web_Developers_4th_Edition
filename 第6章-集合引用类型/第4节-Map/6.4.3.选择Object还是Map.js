console.log(`

    6.4.3 选择 Object 还是 Map

        1. 内存占用
        Object 和 Map 的工程级实现在不同浏览器间存在明显差异，但存储单个键值对所占用的内存数量
    都会随着键的数量线程增加。批量添加或删除键值对则取决于各浏览器对该类型内存分配的工程实现。
    不同浏览器的情况不同，但给定固定大小的内存，Map 大约可以比 Object 多存储 50% 的键值对。

        2. 插入性能
        向 Object 和 Map 中插入新键值对的小号大致相当，不过插入 Map 在所有浏览器中一般会稍微快
    一点。对这两个类型来说，插入速度并不会随着键值对数量而线性增加。如果代码设计大量插入操作，
    那么显然 Map 的性能更佳。

        3. 查找速度
        与插入不同，从大型 Object 和 Map 中查找键值对的性能差异极小，但如果值包含少量键值对，
    则 Object 有时候随队更快。在把 Object 当成数组使用的情况下，浏览器引擎可以进行优化，在
    内存中使用更高效的布局。这对 Map 来说是不可能的。对着两个类型而言，
    查找速度不会随着键值对数量增加而线性增加。如果代码涉及大量查找操作，那么某些情况下可能
    选择 Object 更好一些。

        4. 删除性能
        使用 delete 删除 Object 属性的性能一致依赖饱受诟病，目前在很多浏览器中仍然如此。为此，
    出现了一些伪删除对象属性的操作，包括把对象属性值设置为 undefined 或 null。但很多时候，这
    都是一种讨厌的或不适宜的这种。而对大多数浏览器引擎来说，Map 的 delete方法操作都比插入和查找
    更快。如果代码涉及大量删除操作，那么毫无疑问应该选择 Map。

    `);

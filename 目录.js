/**
 * 第1章 什么是JavaScript
 * 1.1 简短的历史回顾
 * 1.2 JavaScript实现
 *  1.2.1 ECMAScript
 *  1.2.2 DOM
 *  1.2.3 BOM
 * 1.3 JavaScript 版本
 * 
 * 第二章 HTML中的JavaScript
 * 2.1 <script> 元素
 *  2.1.2 标签位置
 *  2.1.2 推迟执行脚本
 *  2.1.3 异步执行脚本
 *  2.1.4 dongtai jiazai jiaoben 
 *  2.1.5 XHTML 中的变化
 *  2.1.6 废弃的语法
 * 2.2 行内代码与外部文件
 * 2.3 文档模式
 * 2.4 《noscript》 元素
 * 2.5 小结
 * 
 * 第三章 语言基础
 * 3.1 语法
 *  3.1.1 区分大小写
 *  3.1.2 标识符
 *  3.1.3 注释
 *  3.1.4 严格模式
 *  3.1.5 语句
 * 3.2 关键字与保留字
 * 3.3 变量
 *  3.3.1 var 关键字
 *  3.3.2 let 声明
 *  3.3.3 const 声明
 *  3.3.4 声明风格及最佳实践
 * 3.4 数据类型
    * 3.4.1 typeof 操作符
    * 3.4.2 Undefined 类型
    * 3.4.3 Null 类型
    * 3.4.4 Boolean 类型
    * 3.4.5 Number 类型
    * 3.4.6 String 类型
    * 3.4.7 Symbol 类型
    * 3.4.8 Object 类型
 * 3.5 操作符
    * 3.5.1 一元操作符
    * 3.5.2 位操作符
    * 3.5.3 布尔操作符
    * 3.5.4 乘性操作符
    * 3.5.5 指数操作符
    * 3.5.6 加性操作符
    * 3.5.7 关系操作符
    * 3.5.8 相等操作符
    * 3.5.9 条件操作符
    * 3.5.10 赋值操作符
    * 3.5.11 逗号操作符
 * 3.6 语句
    * 3.6.1 if 语句
    * 3.6.2 do-while 语句
    * 3.6.3 while 语句
    * 3.6.4 for 语句
    * 3.6.5 for-in 语句
    * 3.6.7 标签语句
    * 3.6.8 break 和 continue 语句
    * 3.6.9 with 语句
    * 3.6.10 switch 语句
 * 3.7 函数
 * 3.8 小结
 * 
 * 第4章 变量、作用域与内存
 * 4.1 原始值与引用值
    * 4.1.1 动态熟悉
    * 4.1.2 复制值
    * 4.1.3 传递惨啊书
    * 4.1.4 确定类型
 * 4.2 执行上下文与作用域
    * 4.2.1 作用域链增强
    * 4.2.2 变量声明
 * 4.3 垃圾回收
    * 4.3.1 标记清理
    * 4.3.2 引用计数
    * 4.3.3 性能
    * 4.3.4 内存管理
 * 4.4 小结
 * 
 * 第5章 基本引用类型
 * 5.1 Date
    * 5.1.1 继承的方法
    * 5.1.2 日期格式化方法
    * 5.1.3 日期、时间组件方法
 * 5.2 RegExp
    * 5.2.1 RegExp 实例熟悉
    * 5.2.2 RegExp 实例方法
    * 5.2.3 RegExp 构造函数熟悉
    * 5.2.4 模式局限
 * 5.3 原始值包装类型
    * 5.3.1 Boolean
    * 5.3.2 Number
    * 5.3.3 String
 * 5.4 单例内置对象
    * 5.4.1 Global
    * 5.4.2 Math
 * 5.5 小结
 * 
 * 第6章 集合引用类型
 * 6.1 Object
 * 6.2 Array
    * 6.2.1 创建数组
    * 6.2.2 数组空位
    * 6.2.3 数组索引
    * 6.2.4 检测数组
    * 6.2.5 迭代器方法
    * 6.2.6 复制和填充方法
    * 6.2.7 转换方法
    * 6.2.8 栈方法
    * 6.2.9 队列方法
    * 6.2.10 排序方法
    * 6.2.11 操作方法
    * 6.2.12 收获和位置方法
    * 6.2.13 迭代方法
    * 6.2.14 归并方法
 * 6.3 定型数组
    * 6.3.1 历史
    * 6.3.2 ArrayBuffer
    * 6.3.3 DataView
    * 6.3.4 定型数组
 * 6.4 Map
    * 6.4.1 基本 API
    * 6.4.2 顺序与迭代
    * 6.4.3 选择 Object 还是 Map
 * 6.5 WeakMap
    * 6.5.1 基本 API
    * 6.5.2 弱键
    * 6.5.3 不可迭代键
    * 6.5.4 使用弱映射 
 * 6.6 Set
    * 6.6.1 基本 API
    * 6.6.2 顺序与迭代
    * 6.6.3 定义正式集合操作
 * 6.7 WeakSet
    * 6.7.1 基本 API
    * 6.7.2 弱值
    * 6.7.3 不可迭代值
    * 6.7.4 使用弱集合
 * 6.8 迭代与扩展操作
 * 6.9 小结
 * 
 * 第7章 迭代器与生成器
 * 7.1 理解迭代
 * 7.2 迭代器模式
    * 7.2.1 可迭代协议
    * 7.2.2 迭代器协议
    * 7.2.3 自定义迭代器
    * 7.2.4 提前终止迭代器
 * 7.3 生成器
    * 7.3.1 生成器基础
    * 7.3.2 通过 yield 终端执行
    * 7.3.3 生成器作为默认迭代器
    * 7.3.4 提前终止生成器
 * 7.4 小结
 * 
 * 
 * 第8章 对象、类与面向对象编程
 * 8.1 理解对象
    * 8.1.1 属性的类型
    * 8.1.2 定义多个属性
    * 8.1.3 读取属性的特性
    * 8.1.4 合并对象
    * 8.1.5 对象标识及相等判定
    * 8.1.6 增强的对象语法
    * 8.1.7 对象解构
 * 8.2 创建对象
    * 8.2.1 概述
    * 8.2.2 工厂模式
    * 8.2.3 构造函数模式
    * 8.2.4 原型模式
    * 8.2.5 对象迭代
 * 8.3 继承
    * 8.3.1 原型链
    * 8.3.2 盗用构造函数
    * 8.3.3 组合继承
    * 8.3.4 原型式继承
    * 8.3.5 寄生式继承
    * 8.3.6 寄生式组合继承
 * 8.4 类
    * 8.4.1 类定义
    * 8.4.2 类构造函数
    * 8.4.3 实例、原型和类成员
    * 8.4.4 继承
 * 8.5 小结
 * 
 * 第9章 代理与反射
 * 9.1 代理基础
    * 9.1.1 创建空代理
    * 9.1.2 定义捕获器
    * 9.1.3 捕获器参数和反射 API
    * 9.1.4 捕获器不变式
    * 9.1.5 可撤销代理
    * 9.1.6 实用反射 API
    * 9.1.7 代理另一个代理
    * 9.1.8 代理的问题与不足
 * 9.2 代理捕获器与反射方法
    * 9.2.1 get()
    * 9.2.2 set()
    * 9.2.3 has()
    * 9.2.4 defineProperty()
    * 9.2.5 getOwnProperty-Descriptor()
    * 9.2.6 deleteProperty()
    * 9.2.7 ownKeys()
    * 9.2.8 getPrototypeOf()
    * 9.2.9 setPrototypeOf()
    * 9.2.10 isExtensible()
    * 9.2.11 preventExtensions()
    * 9.2.12 apply()
    * 9.2.13 construct()
 * 9.3 代理模式
    * 9.3.1 跟踪属性访问
    * 9.3.2 隐藏属性
    * 9.3.3 属性验证
    * 9.3.4 函数与构造函数参数验证
    * 9.3.5 数据绑定与可观察对象
 * 9.4 小结
 * 
 * 第10章 函数
 * 10.1 箭头函数
 * 10.2 函数名
 * 10.3 理解参数
 * 10.4 没有重载
 * 10.5 默认参数值
 * 10.6 参数扩展与收集
    * 10.6.1 扩展参数
    * 10.6.2 收集函数
 * 10.7 函数声明与函数表达式
 * 10.8 函数作为值
 * 10.9 函数内部
    * 10.9.1 arguments
    * 10.9.2 this
    * 10.9.3 caller
    * 10.9.4 new.target
 * 10.10 函数属性与方法
 * 10.11 递归
 * 10.13 尾调用优化
    * 10.13.1 尾调用优化的条件
    * 10.13.2 尾调用优化的代码
 * 10.14 闭包
    * 10.14.1 this 对象
    * 10.14.2 内存泄漏
 * 10.15 立即调用的函数表达式
 * 10.16 私有变量
    * 10.16.1 静态私有变量
    * 10.16.2 模块模式
    * 10.16.3 模块增强模式
 * 10.17 小结
 * 
 * 
 * 第11章 其约与异步函数
 * 11.1 异步编程
    * 11.1.1 同步与异步
    * 11.1.2 以往的异步编程模式
 * 11.2 期约
    * 11.2.1 Promises/A+规范
    * 11.2.2 期约基础
    * 11.2.3 期约的实例方法
    * 11.2.4 期约连锁与期约合成
    * 11.2.5 期约扩展
 * 11.3 异步函数
    * 11.3.1 异步函数
    * 11.3.2 停止和回复执行
    * 11.3.3 异步函数策略
 * 11.4 小结
 * 
 * 第12章 BOM
 * 12.1 window 对象
    * 12.1.1 Global 作用域
    * 12.1.2 窗口关系
    * 12.1.3 窗口位置与像素比
    * 12.1.4 窗口大小
    * 12.1.5 视口位置
    * 12.1.6 导航与打开新窗口
    * 12.1.7 定时器
    * 12.1.8 系统对话框
 * 12.2 location 对象
    * 12.2.1 查询字符串
    * 12.2.2 操作地址
 * 12.3 navigator 对象
    * 12.3.1 检测插件
    * 12.3.2 注册处理程序
 * 12.4 screen 对象
 * 12.5 history 对象
    * 12.5.1 导航
    * 12.5.2 历史状态管理
 * 12.6 小结
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */